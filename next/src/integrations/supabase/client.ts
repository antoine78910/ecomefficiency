// This file is automatically generated. Do not edit it directly.
import { createClient, type SupabaseClient } from '@supabase/supabase-js';
import type { Database } from './types';

// Resolve env vars safely on client and SSR; if absent, create a no-op client to avoid runtime crash.
const SUPABASE_URL = process.env.NEXT_PUBLIC_SUPABASE_URL;
const SUPABASE_PUBLISHABLE_KEY = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;

// Extra validation: URL must be a Supabase domain (avoid localhost/misconfig)
const isValidSupabaseUrl = (u?: string) => {
  if (!u || typeof u !== 'string') return false;
  if (!u.startsWith('http')) return false;
  try {
    const host = new URL(u).hostname.toLowerCase();
    return host.includes('.supabase.co') || host.includes('.supabase.in');
  } catch {
    return false;
  }
};

export const SUPABASE_CONFIG_OK =
  isValidSupabaseUrl(SUPABASE_URL) &&
  typeof SUPABASE_PUBLISHABLE_KEY === "string" && SUPABASE_PUBLISHABLE_KEY.length > 40;

const url = SUPABASE_CONFIG_OK ? (SUPABASE_URL as string) : "https://example.supabase.co";
const key = SUPABASE_CONFIG_OK ? (SUPABASE_PUBLISHABLE_KEY as string) : "eyJhbGciOiJIUzI1NiJ9.placeholder";

if (!SUPABASE_CONFIG_OK) {
  // eslint-disable-next-line no-console
  console.warn('[Supabase] Missing or invalid NEXT_PUBLIC_SUPABASE_URL/ANON_KEY. Check .env.local.');
}

export const supabase: SupabaseClient<Database, 'public'> =
  createClient<Database, 'public'>(url, key, {
    auth: {
      persistSession: true,
      autoRefreshToken: true,
      detectSessionInUrl: true,
      storageKey: 'ecom-efficiency-auth',
      storage: typeof window !== 'undefined' ? window.localStorage : undefined,
    }
  });