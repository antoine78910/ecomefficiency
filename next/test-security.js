/**
 * Script de test pour le syst√®me de s√©curit√©
 * 
 * Ce script teste les diff√©rentes fonctionnalit√©s du syst√®me de blocage
 * 
 * Usage: node test-security.js
 */

const BASE_URL = 'http://localhost:5000'

// Fonction pour simuler une requ√™te avec une IP sp√©cifique
async function testWithIP(ip, userAgent = 'Test Security Script') {
  try {
    console.log(`\nüîç Test avec IP: ${ip}`)
    
    const response = await fetch(BASE_URL, {
      method: 'GET',
      headers: {
        'User-Agent': userAgent,
        'X-Forwarded-For': ip,
        'X-Real-IP': ip,
        'CF-Connecting-IP': ip
      }
    })
    
    console.log(`   Status: ${response.status}`)
    console.log(`   Headers:`, Object.fromEntries(response.headers.entries()))
    
    if (response.status === 503) {
      console.log(`   ‚úÖ IP ${ip} BLOQU√âE - Syst√®me de s√©curit√© actif`)
      const text = await response.text()
      if (text.includes('SECURITY_BLOCK')) {
        console.log(`   ‚úÖ Page de blocage affich√©e correctement`)
      }
    } else {
      console.log(`   ‚ö†Ô∏è  IP ${ip} AUTORIS√âE - Pas de blocage`)
    }
    
    return response.status === 503
  } catch (error) {
    console.log(`   ‚ùå Erreur: ${error.message}`)
    return false
  }
}

// Fonction pour tester l'API admin
async function testAdminAPI() {
  console.log(`\nüîß Test de l'API admin...`)
  
  try {
    // Test de r√©cup√©ration des IPs bloqu√©es
    const response = await fetch(`${BASE_URL}/api/admin/security/blocked-ips`)
    const data = await response.json()
    
    console.log(`   Status API: ${response.status}`)
    console.log(`   IPs bloqu√©es: ${data.data?.length || 0}`)
    
    if (data.data && data.data.length > 0) {
      console.log(`   ‚úÖ API admin fonctionnelle`)
      console.log(`   üìã IPs bloqu√©es:`, data.data.map(ip => ip.ip_address))
    } else {
      console.log(`   ‚ö†Ô∏è  Aucune IP bloqu√©e trouv√©e`)
    }
    
    return true
  } catch (error) {
    console.log(`   ‚ùå Erreur API: ${error.message}`)
    return false
  }
}

// Fonction pour ajouter une IP de test
async function addTestIP() {
  console.log(`\n‚ûï Ajout d'une IP de test...`)
  
  try {
    const testIP = '192.168.100.100'
    
    const response = await fetch(`${BASE_URL}/api/admin/security/blocked-ips`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        ip_address: testIP,
        reason: 'Test automatique du syst√®me de s√©curit√©'
      })
    })
    
    const data = await response.json()
    
    if (response.ok) {
      console.log(`   ‚úÖ IP de test ajout√©e: ${testIP}`)
      return testIP
    } else {
      console.log(`   ‚ùå Erreur ajout IP: ${data.error}`)
      return null
    }
  } catch (error) {
    console.log(`   ‚ùå Erreur: ${error.message}`)
    return null
  }
}

// Fonction pour supprimer l'IP de test
async function removeTestIP(ip) {
  console.log(`\nüóëÔ∏è  Suppression de l'IP de test...`)
  
  try {
    // D'abord, r√©cup√©rer l'ID de l'IP
    const listResponse = await fetch(`${BASE_URL}/api/admin/security/blocked-ips`)
    const listData = await listResponse.json()
    
    const testIPData = listData.data?.find(item => item.ip_address === ip)
    
    if (testIPData) {
      const deleteResponse = await fetch(`${BASE_URL}/api/admin/security/blocked-ips?id=${testIPData.id}`, {
        method: 'DELETE'
      })
      
      if (deleteResponse.ok) {
        console.log(`   ‚úÖ IP de test supprim√©e: ${ip}`)
      } else {
        console.log(`   ‚ùå Erreur suppression IP`)
      }
    } else {
      console.log(`   ‚ö†Ô∏è  IP de test non trouv√©e`)
    }
  } catch (error) {
    console.log(`   ‚ùå Erreur: ${error.message}`)
  }
}

// Test principal
async function runTests() {
  console.log('üöÄ D√©marrage des tests de s√©curit√©...')
  console.log('=' .repeat(50))
  
  // 1. Test de l'API admin
  const apiWorking = await testAdminAPI()
  
  if (!apiWorking) {
    console.log('\n‚ùå L\'API admin ne fonctionne pas. V√©rifiez que le serveur est d√©marr√©.')
    return
  }
  
  // 2. Ajouter une IP de test
  const testIP = await addTestIP()
  
  if (testIP) {
    // 3. Tester le blocage avec l'IP de test
    const blocked = await testWithIP(testIP)
    
    if (blocked) {
      console.log(`\n‚úÖ Test r√©ussi ! L'IP ${testIP} est correctement bloqu√©e`)
    } else {
      console.log(`\n‚ùå Test √©chou√© ! L'IP ${testIP} n'est pas bloqu√©e`)
    }
    
    // 4. Nettoyer - supprimer l'IP de test
    await removeTestIP(testIP)
  }
  
  // 5. Tester avec des IPs normales
  console.log(`\nüåê Test avec des IPs normales...`)
  await testWithIP('127.0.0.1', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36')
  await testWithIP('8.8.8.8', 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36')
  
  console.log('\n' + '='.repeat(50))
  console.log('üéâ Tests termin√©s !')
  console.log('\nüìã R√©sum√©:')
  console.log('   - Syst√®me de s√©curit√©: ‚úÖ Actif')
  console.log('   - API admin: ‚úÖ Fonctionnelle')
  console.log('   - Blocage IP: ‚úÖ Op√©rationnel')
  console.log('   - Interface admin: http://localhost:5000/admin/security')
}

// Ex√©cuter les tests
runTests().catch(console.error)
