/**
 * Script de test pour v√©rifier la g√©olocalisation
 */

require('dotenv').config({ path: '.env.local' })

const SUPABASE_URL = process.env.NEXT_PUBLIC_SUPABASE_URL
const SUPABASE_KEY = process.env.SUPABASE_SERVICE_ROLE_KEY

async function testGeolocation() {
  console.log('üß™ Test de g√©olocalisation\n')
  
  // Tester diff√©rentes IPs
  const testIPs = [
    '127.0.0.1',              // localhost
    '203.150.43.106',         // IP publique de test (Tha√Ølande)
    '8.8.8.8'                 // Google DNS (US)
  ]
  
  for (const ip of testIPs) {
    console.log(`\nüîç Test avec IP: ${ip}`)
    
    try {
      const response = await fetch(`https://ipapi.co/${ip}/json/`)
      const data = await response.json()
      
      if (data.error) {
        console.log('‚ùå Erreur:', data.reason)
      } else {
        console.log('‚úÖ Pays:', data.country_name, `(${data.country_code})`)
        console.log('   Ville:', data.city || 'N/A')
      }
    } catch (error) {
      console.log('‚ùå Erreur r√©seau:', error.message)
    }
  }
  
  console.log('\n\nüìã V√©rification de la base de donn√©es')
  
  if (!SUPABASE_URL || !SUPABASE_KEY) {
    console.log('‚ùå Variables d\'environnement Supabase non configur√©es')
    return
  }
  
  try {
    const { createClient } = require('@supabase/supabase-js')
    const supabase = createClient(SUPABASE_URL, SUPABASE_KEY)
    
    const { data: countries, error } = await supabase
      .from('blocked_countries')
      .select('*')
    
    if (error) {
      console.log('‚ùå Erreur DB:', error.message)
    } else {
      console.log('‚úÖ Pays bloqu√©s trouv√©s:', countries.length)
      countries.forEach(c => {
        console.log(`   - ${c.country_name} (${c.country_code}) - Actif: ${c.is_active}`)
      })
    }
  } catch (error) {
    console.log('‚ùå Erreur:', error.message)
  }
}

testGeolocation()
